import { EntityDecorator, ScalarDecorator, PrimaryDecorator, SpecialDecorator, SetDecorator } from '../../types/decorators';
export declare const Entity: EntityDecorator;
export declare const Int: ScalarDecorator;
export declare const Float: ScalarDecorator;
export declare const String: ScalarDecorator;
export declare const Date: ScalarDecorator;
export declare const Boolean: ScalarDecorator;
export declare const Id: PrimaryDecorator;
export declare const Uuid: PrimaryDecorator;
export declare const Created: SpecialDecorator;
export declare const Updated: SpecialDecorator;
export declare const Version: SpecialDecorator;
export declare const Enum: SetDecorator;
export declare const Set: SetDecorator;
export declare const OneToOne: <T extends import("../../types/utils").Class>(withEntity: () => T, withField: keyof InstanceType<T>, joinColumn?: boolean | object) => ({ constructor: { name: entity } }: any, name: string) => void;
export declare const OneToMany: <T extends import("../../types/utils").Class>(withEntity: () => T, withField: keyof InstanceType<T>) => ({ constructor: { name: entity } }: any, name: string) => void;
export declare const ManyToOne: <T extends import("../../types/utils").Class>(withEntity: () => T, withField: keyof InstanceType<T>, joinColumn?: boolean | object) => ({ constructor: { name: entity } }: any, name: string) => void;
export declare const ManyToMany: <T extends import("../../types/utils").Class>(withEntity: () => T, withField: keyof InstanceType<T>, joinTable?: boolean | object) => ({ constructor: { name: entity } }: any, name: string) => void;
